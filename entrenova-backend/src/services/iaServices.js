// O NOVO E MELHORADO iaServices.js (COM GEMINI)

import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from 'dotenv';

// 1. CONFIGURA√á√ÉO INICIAL - Igual √† sua original!
// -----------------------------------------------------------------
dotenv.config();

// Garantindo que a chave da API est√° sendo carregada
if (!process.env.GEMINI_API_KEY) {
  throw new Error("A vari√°vel de ambiente GEMINI_API_KEY n√£o est√° definida.");
}

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
// Usando um modelo mais recente e eficiente do Gemini!
const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

// =================================================================

// 2. FUN√á√ÉO 1: ANALISAR RESPOSTAS (RELAT√ìRIO 1) - Sua fun√ß√£o original, mas com o prompt do GPT adaptado.
/**
 * Analisa as respostas do formul√°rio inicial e gera o primeiro diagn√≥stico.
 */
export async function analisarRespostasComIA(dadosEmpresa, dadosQuiz) {
  console.log("üöÄ Iniciando Diagn√≥stico Profundo com Gemini...");

  // Mapeamos as respostas para um formato mais leg√≠vel para a IA
  const feedbackFormatado = dadosQuiz.map(item => {
    // Se a pergunta for aberta (n√£o tiver op√ß√µes), a resposta √© o pr√≥prio texto.
    const respostaTexto = Array.isArray(item.opcoes) && item.respostaIndex != null
      ? item.opcoes[item.respostaIndex] // Se for de m√∫ltipla escolha, pega o texto da op√ß√£o
      : item.resposta; // Se for aberta, usa o texto direto

    return `- Pergunta: "${item.pergunta}"\n  - Resposta: "${respostaTexto}"\n  - Nota (se aplic√°vel): ${item.respostaIndex ?? 'N/A'}`;
  }).join('\n');


  const prompt = `
    Voc√™ √© um consultor s√™nior de Desenvolvimento Humano e Organizacional (DHO) da EntreNova, especialista em traduzir respostas de question√°rios em diagn√≥sticos estrat√©gicos. Sua an√°lise deve ser profunda, t√©cnica e seguir a metodologia "Diagn√≥stico Profundo".

    A empresa analisada √© a ${dadosEmpresa.nome}.
    Abaixo est√£o as respostas coletadas de um respons√°vel-chave:
    ---
    ${feedbackFormatado}
    ---

    Siga RIGOROSAMENTE as seguintes etapas e formate a sa√≠da EXCLUSIVAMENTE como um objeto JSON v√°lido, sem nenhum texto ou marcador adicional.

    **ETAPA 1: Identifica√ß√£o e Pontua√ß√£o de Problemas Centrais**
    1.  Leia todas as respostas e identifique de 3 a 5 problemas centrais que a empresa enfrenta. Um problema central √© validado por "recorr√™ncia sem√¢ntica", ou seja, a mesma ideia aparecendo pelo menos 3 vezes de formas diferentes nas respostas.
    2.  Para cada problema identificado, atribua um 'score' de 1.0 a 5.0, calculando-o com base na seguinte f√≥rmula ponderada (use sua expertise para estimar os valores de 1 a 5 para cada crit√©rio com base nas respostas):
        - 'impacto' (Gravidade do problema para a estrat√©gia, peso 0.5)
        - 'frequencia' (Quantas vezes o tema aparece, peso 0.3)
        - 'alcance' (Quantas pessoas ou √°reas afeta, peso 0.2)
    3.  Classifique cada problema com base no score: 'Critico' (4.5-5.0), 'Relevante' (3.5-4.4), 'Operacional' (2.5-3.4), 'Monitor√°vel' (1.0-2.4).

    **ETAPA 2: Mapeamento de Soft Skills Deficit√°rias**
    1.  Para cada problema central identificado na ETAPA 1, mapeie de 1 a 2 'soft_skills' deficit√°rias diretamente relacionadas.
    2.  Use a lista oficial de soft skills fornecida abaixo. Para cada skill, especifique seu 'codigo' ("Universal", "Oculto" ou "Evolutivo") e a 'meta' principal associada.
        - **Lista de Soft Skills para consulta:**
          - Accountability (Oculto, Lideran√ßa & Accountability)
          - Autogest√£o (Oculto, Lideran√ßa & Accountability)
          - Comunica√ß√£o eficaz (Universal, Comunica√ß√£o & Alinhamento)
          - Colabora√ß√£o e trabalho em equipe (Universal, Engajamento & Pertencimento)
          - Pensamento sist√™mico (Oculto, Inova√ß√£o & Adaptabilidade)
          - Lideran√ßa (Universal, Lideran√ßa & Accountability)
          - Resili√™ncia (Universal, Inova√ß√£o & Adaptabilidade)
          - E assim por diante... (voc√™ pode incluir a lista completa do documento aqui para a IA ter como refer√™ncia direta)

    **ETAPA 3: Gera√ß√£o dos Relat√≥rios Narrativos (D1-D7)**
    1.  **D1_descoberta**: Escreva um par√°grafo (m√°ximo 60 palavras) sobre o contexto da empresa, confrontando como ela se v√™ com os dados que voc√™ analisou.
    2.  **D3_analise_consultiva**: Para cada problema central, escreva uma breve an√°lise (m√°ximo 40 palavras) explicando a causa raiz, como no exemplo do "Relat√≥rio Master Shot".
    3.  **D5_cenarios_futuros**: Descreva em um par√°grafo o cen√°rio de 'evolucao' (se os problemas forem tratados) e em outro o cen√°rio de 'deterioracao' (se nada for feito).
    4.  **pontos_fortes**: Liste 3 pontos fortes que a empresa j√° possui e que podem ser usados como alavanca.
    5.  **D6_direcionamento_grow**: Converta os problemas em metas (Goal) e sugira op√ß√µes (Options) para resolv√™-los.
    6.  **D7_design_desenvolvimento**: Com base nas soft skills mapeadas, sugira 2 trilhas de desenvolvimento no n√≠vel "Funda√ß√£o".

    **ETAPA 4: C√°lculo do √çndice DHO Indicativo**
    1.  Com base na gravidade geral dos problemas e nas pr√°ticas de DHO mencionadas (ou ausentes) nas respostas, calcule uma 'nota_dho_indicativa' de 1.0 a 5.0.
    2.  Escreva uma 'justificativa_dho' completa explicando o porqu√™ da nota.

    **ESTRUTURA JSON DE SA√çDA OBRIGAT√ìRIA:**
    {
      "problemas_centrais": [
        {
          "problema": "string",
          "score": "number",
          "classificacao": "string",
          "soft_skills_mapeadas": [
            {
              "skill": "string",
              "codigo": "string",
              "meta": "string"
            }
          ]
        }
      ],
      "relatorio_narrativo": {
        "D1_descoberta": "string",
        "D3_analise_consultiva": [
          {
            "problema": "string",
            "analise": "string"
          }
        ],
        "D5_cenarios_futuros": {
          "evolucao": "string",
          "deterioracao": "string"
        },
        "pontos_fortes": ["string", "string", "string"],
        "D6_direcionamento_grow": {
          "goal": "string",
          "options": ["string", "string"]
        },
        "D7_design_desenvolvimento": {
          "trilhas_fundacao": ["string", "string"]
        }
      },
      "indice_dho": {
        "nota_indicativa": "number",
        "justificativa": "string"
      }
    }
  `;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    const jsonText = text.replace(/```json/g, '').replace(/```/g, '').trim();

    console.log("‚úÖ Diagn√≥stico Profundo gerado com sucesso!");
    return JSON.parse(jsonText);
  } catch (error) {
    console.error("‚ùå Erro no Gemini ao gerar Diagn√≥stico Profundo:", error);
    // Retorna um objeto de erro para n√£o quebrar o sistema
    return {
      error: "N√£o foi poss√≠vel gerar a an√°lise completa.",
      details: error.message
    };
  }
}

// =================================================================

// 3. FUN√á√ÉO 2: GERAR NOVO RELAT√ìRIO (RELAT√ìRIO 2) - A fun√ß√£o do seu colega, agora com Gemini!
/**
 * Gera um novo relat√≥rio (Relat√≥rio 2) baseado nas respostas do chatbot.
 */
export async function gerarNovoRelatorio(dadosEmpresa, dadosQuizChatbot) {
  console.log("üöÄ Iniciando an√°lise com Gemini para o Relat√≥rio 2...");

  // Formatando as respostas do chatbot para a IA entender
  const respostasFormatadas = dadosQuizChatbot
    .map((q, i) => `${i + 1}. Pergunta: ${q.pergunta}\n   Resposta: ${q.resposta}`)
    .join("\n\n");

  const prompt = `
        Voc√™ √© um consultor de neg√≥cios analisando uma conversa com um cliente da empresa "${dadosEmpresa.nome}".
        A conversa foi a seguinte:
        ${respostasFormatadas}

        Sua tarefa √©:
        1.  **relatorio2**: Crie um relat√≥rio textual que consolide e interprete as respostas do cliente, identificando os desafios e expectativas.
        2.  **resumo2**: Crie um resumo executivo muito curto (m√°ximo 30 palavras) desse relat√≥rio.

        Formate a resposta EXCLUSIVAMENTE como um objeto JSON, sem nenhum texto ou marcador adicional. A estrutura deve ser:
        {
        "relatorio2": "string",
        "resumo2": "string"
        }
    `;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    const jsonText = text.replace(/```json/g, '').replace(/```/g, '').trim();

    console.log("‚úÖ An√°lise do Relat√≥rio 2 recebida do Gemini!");
    return JSON.parse(jsonText);
  } catch (error) {
    console.error("‚ùå Erro na chamada do Gemini para o Relat√≥rio 2:", error);
    return {
      relatorio2: "N√£o foi poss√≠vel gerar o relat√≥rio a partir da conversa.",
      resumo2: "Resumo indispon√≠vel."
    };
  }
}